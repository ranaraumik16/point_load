{"version":3,"sources":["../../../src/lib/laslaz-decoder.js"],"names":["getModule","require","Module","POINT_FORMAT_READERS","dv","position","getInt32","intensity","getUint16","classification","getUint8","color","readAs","buf","Type","offset","count","undefined","sub","slice","BYTES_PER_ELEMENT","r","ret","i","push","parseLASHeader","arraybuffer","o","pointsOffset","Uint32Array","pointsFormatId","Uint8Array","pointsStructSize","Uint16Array","pointsCount","start","scale","Float64Array","bounds","maxs","mins","LASLoader","constructor","open","readOffset","getHeader","header","readData","skip","Error","Math","min","end","buffer","hasMoreData","pointsToRead","bufferSize","ceil","pointsRead","src","set","close","LAZLoader","instance","LASZip","abInt","_malloc","byteLength","HEAPU8","e","message","thisBuf","bufRead","getPoint","a","delete","LASDecoder","len","arrayb","decoder","pointSize","index","DataView","LASFile","determineVersion","version","determineFormat","formatId","loader","isCompressed","bit7","bit6","ver","Int8Array","versionAsString","isOpen","getUnpacker","LASModuleWasLoaded"],"mappings":"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","sourcesContent":["/*\n  Modified from Uday Verma and Howard Butler's plasio\n  https://github.com/verma/plasio/\n  MIT License\n*/\n\n// laslaz.js - treat as compiled code\nconst getModule = require('../libs/laz-perf');\n\nlet Module = null;\n\nconst POINT_FORMAT_READERS = {\n  0: dv => {\n    return {\n      position: [dv.getInt32(0, true), dv.getInt32(4, true), dv.getInt32(8, true)],\n      intensity: dv.getUint16(12, true),\n      classification: dv.getUint8(15, true)\n    };\n  },\n  1: dv => {\n    return {\n      position: [dv.getInt32(0, true), dv.getInt32(4, true), dv.getInt32(8, true)],\n      intensity: dv.getUint16(12, true),\n      classification: dv.getUint8(15, true)\n    };\n  },\n  2: dv => {\n    return {\n      position: [dv.getInt32(0, true), dv.getInt32(4, true), dv.getInt32(8, true)],\n      intensity: dv.getUint16(12, true),\n      classification: dv.getUint8(15, true),\n      color: [dv.getUint16(20, true), dv.getUint16(22, true), dv.getUint16(24, true)]\n    };\n  },\n  3: dv => {\n    return {\n      position: [dv.getInt32(0, true), dv.getInt32(4, true), dv.getInt32(8, true)],\n      intensity: dv.getUint16(12, true),\n      classification: dv.getUint8(15, true),\n      color: [dv.getUint16(28, true), dv.getUint16(30, true), dv.getUint16(32, true)]\n    };\n  }\n};\n\nfunction readAs(buf, Type, offset, count) {\n  count = count === undefined || count === 0 ? 1 : count;\n  const sub = buf.slice(offset, offset + Type.BYTES_PER_ELEMENT * count);\n\n  const r = new Type(sub);\n  if (count === 1) {\n    return r[0];\n  }\n\n  const ret = [];\n  for (let i = 0; i < count; i++) {\n    ret.push(r[i]);\n  }\n\n  return ret;\n}\n\nfunction parseLASHeader(arraybuffer) {\n  const o = {};\n\n  o.pointsOffset = readAs(arraybuffer, Uint32Array, 32 * 3);\n  o.pointsFormatId = readAs(arraybuffer, Uint8Array, 32 * 3 + 8);\n  o.pointsStructSize = readAs(arraybuffer, Uint16Array, 32 * 3 + 8 + 1);\n  o.pointsCount = readAs(arraybuffer, Uint32Array, 32 * 3 + 11);\n\n  let start = 32 * 3 + 35;\n  o.scale = readAs(arraybuffer, Float64Array, start, 3);\n  start += 24; // 8*3\n  o.offset = readAs(arraybuffer, Float64Array, start, 3);\n  start += 24;\n\n  const bounds = readAs(arraybuffer, Float64Array, start, 6);\n  start += 48; // 8*6;\n  o.maxs = [bounds[0], bounds[2], bounds[4]];\n  o.mins = [bounds[1], bounds[3], bounds[5]];\n\n  return o;\n}\n\n// LAS Loader\n// Loads uncompressed files\n//\nclass LASLoader {\n  constructor(arraybuffer) {\n    this.arraybuffer = arraybuffer;\n  }\n\n  open() {\n    // nothing needs to be done to open this file\n    //\n    this.readOffset = 0;\n    return true;\n  }\n\n  getHeader() {\n    this.header = parseLASHeader(this.arraybuffer);\n    return this.header;\n  }\n\n  readData(count, offset, skip) {\n    const {header, arraybuffer} = this;\n    if (!header) {\n      throw new Error('Cannot start reading data till a header request is issued');\n    }\n\n    let {readOffset} = this;\n    let start;\n\n    if (skip <= 1) {\n      count = Math.min(count, header.pointsCount - readOffset);\n      start = header.pointsOffset + readOffset * header.pointsStructSize;\n      const end = start + count * header.pointsStructSize;\n      readOffset += count;\n      this.readOffset = readOffset;\n      return {\n        buffer: arraybuffer.slice(start, end),\n        count,\n        hasMoreData: readOffset < header.pointsCount\n      };\n    }\n\n    const pointsToRead = Math.min(count * skip, header.pointsCount - readOffset);\n    const bufferSize = Math.ceil(pointsToRead / skip);\n    let pointsRead = 0;\n\n    const buf = new Uint8Array(bufferSize * header.pointsStructSize);\n    for (let i = 0; i < pointsToRead; i++) {\n      if (i % skip === 0) {\n        start = header.pointsOffset + readOffset * header.pointsStructSize;\n        const src = new Uint8Array(arraybuffer, start, header.pointsStructSize);\n\n        buf.set(src, pointsRead * header.pointsStructSize);\n        pointsRead++;\n      }\n\n      readOffset++;\n    }\n    this.readOffset = readOffset;\n\n    return {\n      buffer: buf.buffer,\n      count: pointsRead,\n      hasMoreData: readOffset < header.pointsCount\n    };\n  }\n\n  close() {\n    this.arraybuffer = null;\n    return true;\n  }\n}\n\n// LAZ Loader\n// Uses NaCL module to load LAZ files\n//\nclass LAZLoader {\n  constructor(arraybuffer) {\n    this.arraybuffer = arraybuffer;\n    this.instance = null; // LASZip instance\n\n    if (!Module) {\n      // Avoid executing laz-perf on import\n      Module = getModule();\n    }\n  }\n\n  open() {\n    try {\n      const {arraybuffer} = this;\n      this.instance = new Module.LASZip();\n      const abInt = new Uint8Array(arraybuffer);\n      const buf = Module._malloc(arraybuffer.byteLength);\n\n      this.instance.arraybuffer = arraybuffer;\n      this.instance.buf = buf;\n      Module.HEAPU8.set(abInt, buf);\n      this.instance.open(buf, arraybuffer.byteLength);\n\n      this.instance.readOffset = 0;\n\n      return true;\n    } catch (e) {\n      throw new Error(`Failed to open file: ${e.message}`);\n    }\n  }\n\n  getHeader() {\n    if (!this.instance) {\n      throw new Error('You need to open the file before trying to read header');\n    }\n\n    try {\n      const header = parseLASHeader(this.instance.arraybuffer);\n      header.pointsFormatId &= 0x3f;\n      this.header = header;\n      return header;\n    } catch (e) {\n      throw new Error(`Failed to get header: ${e.message}`);\n    }\n  }\n\n  readData(count, offset, skip) {\n    if (!this.instance) {\n      throw new Error('You need to open the file before trying to read stuff');\n    }\n\n    const {header, instance} = this;\n\n    if (!header) {\n      throw new Error(\n        'You need to query header before reading, I maintain state that way, sorry :('\n      );\n    }\n\n    try {\n      const pointsToRead = Math.min(count * skip, header.pointsCount - instance.readOffset);\n      const bufferSize = Math.ceil(pointsToRead / skip);\n      let pointsRead = 0;\n\n      const thisBuf = new Uint8Array(bufferSize * header.pointsStructSize);\n      const bufRead = Module._malloc(header.pointsStructSize);\n      for (let i = 0; i < pointsToRead; i++) {\n        instance.getPoint(bufRead);\n\n        if (i % skip === 0) {\n          const a = new Uint8Array(Module.HEAPU8.buffer, bufRead, header.pointsStructSize);\n          thisBuf.set(a, pointsRead * header.pointsStructSize);\n          pointsRead++;\n        }\n\n        instance.readOffset++;\n      }\n\n      return {\n        buffer: thisBuf.buffer,\n        count: pointsRead,\n        hasMoreData: instance.readOffset < header.pointsCount\n      };\n    } catch (e) {\n      throw new Error(`Failed to read data: ${e.message}`);\n    }\n  }\n\n  close() {\n    try {\n      if (this.instance !== null) {\n        this.instance.delete();\n        this.instance = null;\n      }\n      return true;\n    } catch (e) {\n      throw new Error(`Failed to close file: ${e.message}`);\n    }\n  }\n}\n\n// Helper class: Decodes LAS records into points\n//\nclass LASDecoder {\n  constructor(buffer, len, header) {\n    this.arrayb = buffer;\n    this.decoder = POINT_FORMAT_READERS[header.pointsFormatId];\n    this.pointsCount = len;\n    this.pointSize = header.pointsStructSize;\n    this.scale = header.scale;\n    this.offset = header.offset;\n    this.mins = header.mins;\n    this.maxs = header.maxs;\n  }\n\n  getPoint(index) {\n    if (index < 0 || index >= this.pointsCount) {\n      throw new Error('Point index out of range');\n    }\n\n    const dv = new DataView(this.arrayb, index * this.pointSize, this.pointSize);\n    return this.decoder(dv);\n  }\n}\n\n// A single consistent interface for loading LAS/LAZ files\nexport class LASFile {\n  constructor(arraybuffer) {\n    this.arraybuffer = arraybuffer;\n\n    this.determineVersion();\n    if (this.version > 13) {\n      throw new Error('Only file versions <= 1.3 are supported at this time');\n    }\n\n    this.determineFormat();\n    if (POINT_FORMAT_READERS[this.formatId] === undefined) {\n      throw new Error('The point format ID is not supported');\n    }\n\n    this.loader = this.isCompressed\n      ? new LAZLoader(this.arraybuffer)\n      : new LASLoader(this.arraybuffer);\n  }\n\n  determineFormat() {\n    const formatId = readAs(this.arraybuffer, Uint8Array, 32 * 3 + 8);\n    const bit7 = (formatId & 0x80) >> 7;\n    const bit6 = (formatId & 0x40) >> 6;\n\n    if (bit7 === 1 && bit6 === 1) {\n      throw new Error('Old style compression not supported');\n    }\n\n    this.formatId = formatId & 0x3f;\n    this.isCompressed = bit7 === 1 || bit6 === 1;\n  }\n\n  determineVersion() {\n    const ver = new Int8Array(this.arraybuffer, 24, 2);\n    this.version = ver[0] * 10 + ver[1];\n    this.versionAsString = `${ver[0]}.${ver[1]}`;\n  }\n\n  open() {\n    if (this.loader.open()) {\n      this.isOpen = true;\n    }\n  }\n\n  getHeader() {\n    return this.loader.getHeader();\n  }\n\n  readData(count, start, skip) {\n    return this.loader.readData(count, start, skip);\n  }\n\n  close() {\n    if (this.loader.close()) {\n      this.isOpen = false;\n    }\n  }\n\n  getUnpacker() {\n    return LASDecoder;\n  }\n}\n\nexport const LASModuleWasLoaded = false;\n\n/* eslint no-use-before-define: 2 */\n"],"file":"laslaz-decoder.js"}